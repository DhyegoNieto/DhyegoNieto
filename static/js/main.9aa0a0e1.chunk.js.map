{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","datos","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","type","htmlFor","vaue","defaultValue","Component","Error","mensaje","Clima","_this$props$resultado","resultado","name","weather","main","icon","concat","altText","temp","toFixed","src","alt","temp_max","temp_min","mostrarResultado","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","respuesta","json","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9aa0a0e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className='nav-wrapper light-blue darken-2'>\r\n                    <a className='brand-logo'>{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n    \r\n    //Crear refs\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n\r\n        //leer refs y crear objeto\r\n        const datos = {\r\n            ciudad : this.ciudadRef.current.value,\r\n            pais : this.paisRef.current.value\r\n        }\r\n\r\n        this.props.datosConsulta(datos);\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className='contenedor-form'>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className='input-field col s12 m8 l4 offset-m2'>\r\n                                <input ref={this.ciudadRef} id='ciudad' type='text' />\r\n                                <label htmlFor='ciudad'>Ciudad:</label>\r\n                            </div>\r\n                            <div className='input-field col s12 m8 l4 offset-m2'>\r\n                                <select ref={this.paisRef} id='pais'>\r\n                                    <option vaue='' defaultValue>Elije un país</option>\r\n                                    <option value='AR' defaultValue>Argentina</option>\r\n                                    <option value='CO' defaultValue>Colombia</option>\r\n                                    <option value='MX' defaultValue>México</option>\r\n                                    <option value='US' defaultValue>U.S.A</option>\r\n                                    <option value='CR' defaultValue>Costa Rica</option>\r\n                                    <option value='ES' defaultValue>España</option>\r\n                                    <option value='PE' defaultValue>Perú</option>\r\n                                </select>\r\n                                <label htmlFor='pais'>Ciudad:</label>\r\n                            </div>\r\n                            <div className='input-field col s12 m8 l4 offset-m2 buscador'>\r\n                                <input type='submit' className='waves-effect waves-light btn-large yellow accent-4' value='Buscar' />\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         ); \r\n    }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    datosConsulta : PropTypes.func.isRequired\r\n}\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='row'>\r\n                <div className='col s12 m6 offset-m3'>\r\n                    <div className='card-panel red darken-4 error'>\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje : PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado() {\r\n        const {name, weather, main} = this.props.resultado;\r\n\r\n        if(!name || !weather || !main) return null;\r\n\r\n        const kelvin = 273.15;\r\n        const icon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const altText = `Clima de ${name}`;\r\n\r\n        return (\r\n            <div className='row'>\r\n                <div className='resultado col s12 m8 l6 offset-m2 offser-l3'>\r\n                    <div className='card-panel light-blue align-center'>\r\n                        <span className='white-text'>\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className='temperatura'>\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={icon} alt={altText} />\r\n                            </p>\r\n\r\n                            <p>Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                            <p>Min. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div className='container'>\r\n                    {this.mostrarResultado()}\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado : PropTypes.object.isRequired\r\n}\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Error from './Error';\nimport Clima from './Clima';\n\nclass App extends Component {\n\n  state = {\n    error : false,\n    consulta : {},\n    resultado :{}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.consulta !== this.state.consulta) {\n      this.consultarApi();\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      error : false\n    })\n  }\n\n  consultarApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais)\n      return null;\n    //http://api.openweathermap.org/data/2.5/weather?q=mexico&id=524901&APPID=890ab98cdd2a4790da3943535c7e3bbd\n    const appId = '890ab98cdd2a4790da3943535c7e3bbd';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&id=524901&APPID=${appId}`;\n    fetch(url)\n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then(datos => {\n        this.setState({\n          resultado : datos\n        })\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  datosConsulta = datos => {\n    if(datos.ciudad==='' || datos.pais==='') {\n      this.setState({\n        error : true\n      })\n    } else {\n      this.setState({\n        error : false,\n        consulta : datos\n      })\n    }\n  }\n\n  render() {\n\n    const {error} = this.state,\n          {cod} = this.state.resultado;\n\n    let resultado;\n\n    if(error) {\n      resultado = <Error mensaje='Ambos campos son obligatorios' />\n    } else if(cod==='404') {\n      resultado = <Error mensaje='Ciudad no encontrada' />\n    } else {\n      resultado = <Clima \n                    resultado={this.state.resultado}\n                  />\n    }\n\n    return (\n      <div className=\"app\">\n        <Header \n          titulo='Clima React'\n        />\n\n        <Formulario \n          datosConsulta = {this.datosConsulta}\n        />\n\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}